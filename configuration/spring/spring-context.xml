<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
        default-lazy-init="true">
    
    <description>Spring Configuration</description>
    
    <!-- 加载properties文件 -->  
    <context:property-placeholder
    location="classpath:configuration/mybatis/jdbc.properties,
              classpath:configuration/redis/redis.properties"
              
    ignore-unresolvable="true"/>
    
    <!--添加扫描的驱动支持-->  
    <!--<context:annotation-config/>-->  
    
    <!--<context:spring-configured />-->
    
    <!-- 开启组件自动扫描；使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
    <context:component-scan base-package="ru.com.senka"><!-- base-package 如果多个，用“,”分隔 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    <bean id="lettuceConnectionFactory" 
          class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory" 
          p:host-name="${redis.host}" 
          p:port="${redis.port}"/>
    
    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <property name="poolName" value="${hikari.poolName}" />
        <!--<property name="dataSourceClassName"       value="com.mysql.jdbc.jdbc2.optional.MysqlDataSource" />-->
        <property name="driverClassName" value="${jdbc.driverClasss}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!--<property name="autoCommit" value="${hikari.autoCommit}" />-->
        <property name="connectionTimeout" value="${hikari.connectionTimeout}" />
        <property name="idleTimeout" value="${hikari.idleTimeout}" />
        <property name="maxLifetime" value="${hikari.maxLifetime}" />
        <property name="minimumIdle" value="${hikari.minimumIdle}" />
        <property name="maximumPoolSize" value="${hikari.maximumPoolSize}" />
        <property name="connectionTestQuery" value="${hikari.connectionTestQuery}" />
<!--        <property name="dataSourceProperties">
            <props>
                <prop key="driverClassName">${jdbc.driverClasss}</prop>
                <prop key="url">${jdbc.url}</prop>
                <prop key="user">${jdbc.username}</prop>
                <prop key="password">${jdbc.password}</prop>
            </props>
        </property>-->
    </bean>

    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg ref="hikariConfig" />
    </bean>
  
    <!--freemarker配置-->  
<!--    <bean id="freemarkerConfig"  
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
        <property name="templateLoaderPath" value="src/main/webapp/frontend/"/>  
        <property name="freemarkerSettings">  
            <props>  
                <prop key="template_update_delay">0</prop>  
                <prop key="default_encoding">UTF-8</prop>  
                <prop key="number_format">0.##########</prop>  
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
                <prop key="classic_compatible">true</prop>  
                <prop key="template_exception_handler">ignore</prop>  
            </props>  
        </property>  
    </bean>  -->
  
    <!--事务管理-->  
    <bean id="transactionManager"  
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource"/>  
    </bean>  
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->  
    
    <!-- 事务管理 通知 -->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!-- 对insert,create,update,modify,delete,remove 开头的方法进行事务管理,只要有异常就回滚 -->
            <tx:method name="insert*" rollback-for="java.lang.Throwable"/>
            <tx:method name="add*" rollback-for="java.lang.Throwable"/>
            <tx:method name="create*" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" rollback-for="java.lang.Throwable"/>
            <tx:method name="modify*" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" rollback-for="java.lang.Throwable"/>
            <tx:method name="remove*" rollback-for="java.lang.Throwable"/>
            <!-- find,get,select,count开头的方法,开启只读,提高数据库访问性能 -->
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <!-- 对其他方法 使用默认的事务管理 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 事务 aop 配置 -->
    <aop:config>
        <aop:pointcut id="serviceMethods" expression="execution(public * ru.com.senka.database.service.transaction..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
    </aop:config>

    <!-- 配置使Spring采用CGLIB代理 --><!-- 开启基于@AspectJ切面的注解处理器 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven proxy-target-class="true"/>
    
</beans>